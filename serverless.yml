service: Manual-Accounting-Service
plugins:
  - serverless-offline
  - serverless-dotenv-plugin

frameworkVersion: '3'

useDotenv: true

custom:
  visitorsTableName: 'visitors-table'
  usersTableName: 'users-table'
  serverless-offline:
    httpPort: 3000

provider:
  name: aws
  runtime: nodejs18.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
  environment:
    VISITORS_TABLE: ${self:custom.visitorsTableName}
    USERS_TABLE: ${self:custom.usersTableName}

functions:
  getVisitors:
    handler: dist/handler.getVisitors
    events:
      - http:
          path: visitors
          method: GET
          cors: true
  
  getVisitor:
    handler: dist/handler.getVisitor
    events:
      - http:
          path: visitors/{id}
          method: GET
          cors: true
  
  addVisitor:
    handler: dist/handler.addVisitor
    events:
      - http:
          path: addVisitor
          method: POST
          cors: true
  
  deleteVisitor:
    handler: dist/handler.deleteVisitor
    events:
      - http:
          path: deleteVisitor/{id}
          method: POST
          cors: true
  
  updateVisitor:
    handler: dist/handler.updateVisitor
    events:
      - http:
          path: updateVisitor
          method: POST
          cors: true
  
  login:
    handler: dist/handler.login
    events:
      - http:
          path: login
          method: POST
          cors: true
  
  user:
    handler: dist/handler.user
    events:
      - http:
          path: user
          method: GET
          cors: true
  
  logout:
    handler: dist/handler.logout
    events:
      - http:
          path: logout
          method: GET
          cors: true
  
  register:
    handler: dist/handler.register
    events:
      - http:
          path: register
          method: POST
          cors: true
  
resources:
  Resources:
    VisitorsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: visitorsId
            AttributeType: S
        KeySchema:
          - AttributeName: visitorsId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.visitorsTableName}
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.usersTableName}
